#List of effects Trickster Bloom can apply
"Trickster Bloom Effects" = ["effect[minecraft:speed];time[30-60];level[0-1]", "effect[minecraft:slowness];time[10-20];level[0-1]", "effect[minecraft:haste];time[60-120];level[0-1]", "effect[minecraft:mining_fatigue];time[60-120];level[0-1]", "effect[minecraft:strength];time[60-120];level[0-1]", "effect[minecraft:jump_boost];time[60-120];level[0-1]", "effect[minecraft:nausea];time[10];level[0]", "effect[minecraft:regeneration];time[10-30];level[0-1]", "effect[minecraft:resistance];time[60-120];level[0-1]", "effect[minecraft:fire_resistance];time[150-300];level[0-1]", "effect[minecraft:water_breathing];time[150-300];level[0-1]", "effect[minecraft:invisibility];time[60-300];level[0-1]", "effect[minecraft:blindness];time[30-60];level[0-1]", "effect[minecraft:night_vision];time[60-120];level[0-1]", "effect[minecraft:hunger];time[10-30];level[0-1]", "effect[minecraft:weakness];time[10-20];level[0-1]", "effect[minecraft:poison];time[5-10];level[0]", "effect[minecraft:wither];time[3-5];level[0]", "effect[minecraft:absorption];time[30-60];level[0-1]", "effect[minecraft:saturation];time[15-30];level[0-1]", "effect[minecraft:glowing];time[30-60];level[0-1]", "effect[minecraft:levitation];time[2-3];level[0]", "effect[minecraft:luck];time[30-60];level[0-1]", "effect[minecraft:unluck];time[20-40];level[0-1]", "effect[minecraft:slow_falling];time[15-30];level[0-1]", "effect[minecraft:conduit_power];time[90-180];level[0-1]", "effect[minecraft:dolphins_grace];time[30-60];level[0-1]", "effect[minecraft:hero_of_the_village];time[120];level[2-4]"]

[doodads]

	[doodads.branch]
		#The number of attempts made to suscessfully drop an item
		#positive numbers are exact, negitive are a random chance between 0 and the number
		#Range: -100 ~ 100
		drop_attempts = 1
		#'1 in x' chance the doodad will drop something from the whitelist, excluding items from the blacklist
		#Range: 0 ~ 100
		drop_chance = 1
		#The number of items to drop on a suscessful attempt
		#positive numbers are exact, negitive are a random chance between 0 and the number
		#Range: -100 ~ 100
		drop_amount = -2
		#Items listed here have a chance to drop
		#Formats: ItemTag: 'tag|<tagId>#<count>', Mod Item: '<modId>:<itemId>#<count>'
		whitelist = ["minecraft:stick#1-3"]
		#Items listed here can never drop
		#Formats: ItemTag: 'tag|<tagId>', Mod Item: '<modId>:<itemId>', Entire Mod: 'mod|<modId>'
		blacklist = []

	[doodads.stone]
		#The number of attempts made to suscessfully drop an item
		#positive numbers are exact, negitive are a random chance between 0 and the number
		#Range: -100 ~ 100
		drop_attempts = 1
		#'1 in x' chance the doodad will drop something from the whitelist, excluding items from the blacklist
		#Range: 0 ~ 100
		drop_chance = 1
		#The number of items to drop on a suscessful attempt
		#positive numbers are exact, negitive are a random chance between 0 and the number
		#Range: -100 ~ 100
		drop_amount = -2
		#Items listed here have a chance to drop
		#Formats: ItemTag: 'tag|<tagId>#<count>', Mod Item: '<modId>:<itemId>#<count>'
		whitelist = ["tag|forge:dusts#1", "terraqueous:gravel_lump#1"]
		#Items listed here can never drop
		#Formats: ItemTag: 'tag|<tagId>', Mod Item: '<modId>:<itemId>', Entire Mod: 'mod|<modId>'
		blacklist = ["tag|forge:dusts/burnium", "tag|forge:dusts/endimium"]

	[doodads.bone]
		#The number of attempts made to suscessfully drop an item
		#positive numbers are exact, negitive are a random chance between 0 and the number
		#Range: -100 ~ 100
		drop_attempts = 1
		#'1 in x' chance the doodad will drop something from the whitelist, excluding items from the blacklist
		#Range: 0 ~ 100
		drop_chance = 1
		#The number of items to drop on a suscessful attempt
		#positive numbers are exact, negitive are a random chance between 0 and the number
		#Range: -100 ~ 100
		drop_amount = -2
		#Items listed here have a chance to drop
		#Formats: ItemTag: 'tag|<tagId>#<count>', Mod Item: '<modId>:<itemId>#<count>'
		whitelist = ["tag|forge:bones#1", "minecraft:bone_meal#1-3"]
		#Items listed here can never drop
		#Formats: ItemTag: 'tag|<tagId>', Mod Item: '<modId>:<itemId>', Entire Mod: 'mod|<modId>'
		blacklist = []

	[doodads.sandstone]
		#The number of attempts made to suscessfully drop an item
		#positive numbers are exact, negitive are a random chance between 0 and the number
		#Range: -100 ~ 100
		drop_attempts = 1
		#'1 in x' chance the doodad will drop something from the whitelist, excluding items from the blacklist
		#Range: 0 ~ 100
		drop_chance = 1
		#The number of items to drop on a suscessful attempt
		#positive numbers are exact, negitive are a random chance between 0 and the number
		#Range: -100 ~ 100
		drop_amount = -2
		#Items listed here have a chance to drop
		#Formats: ItemTag: 'tag|<tagId>#<count>', Mod Item: '<modId>:<itemId>#<count>'
		whitelist = ["tag|forge:dusts#1", "terraqueous:sandstone_lump#1"]
		#Items listed here can never drop
		#Formats: ItemTag: 'tag|<tagId>', Mod Item: '<modId>:<itemId>', Entire Mod: 'mod|<modId>'
		blacklist = ["tag|forge:dusts/burnium", "tag|forge:dusts/endimium"]

	[doodads.red_sandstone]
		#The number of attempts made to suscessfully drop an item
		#positive numbers are exact, negitive are a random chance between 0 and the number
		#Range: -100 ~ 100
		drop_attempts = 1
		#'1 in x' chance the doodad will drop something from the whitelist, excluding items from the blacklist
		#Range: 0 ~ 100
		drop_chance = 1
		#The number of items to drop on a suscessful attempt
		#positive numbers are exact, negitive are a random chance between 0 and the number
		#Range: -100 ~ 100
		drop_amount = -2
		#Items listed here have a chance to drop
		#Formats: ItemTag: 'tag|<tagId>#<count>', Mod Item: '<modId>:<itemId>#<count>'
		whitelist = ["tag|forge:dusts#1", "terraqueous:red_sandstone_lump#1"]
		#Items listed here can never drop
		#Formats: ItemTag: 'tag|<tagId>', Mod Item: '<modId>:<itemId>', Entire Mod: 'mod|<modId>'
		blacklist = ["tag|forge:dusts/burnium", "tag|forge:dusts/endimium"]

	[doodads.endimium]
		#The number of attempts made to suscessfully drop an item
		#positive numbers are exact, negitive are a random chance between 0 and the number
		#Range: -100 ~ 100
		drop_attempts = 1
		#'1 in x' chance the doodad will drop something from the whitelist, excluding items from the blacklist
		#Range: 0 ~ 100
		drop_chance = 1
		#The number of items to drop on a suscessful attempt
		#positive numbers are exact, negitive are a random chance between 0 and the number
		#Range: -100 ~ 100
		drop_amount = -3
		#Items listed here have a chance to drop
		#Formats: ItemTag: 'tag|<tagId>#<count>', Mod Item: '<modId>:<itemId>#<count>'
		whitelist = ["tag|forge:gems/endimium#1-4", "tag|forge:dusts/endimium#1-4"]
		#Items listed here can never drop
		#Formats: ItemTag: 'tag|<tagId>', Mod Item: '<modId>:<itemId>', Entire Mod: 'mod|<modId>'
		blacklist = []

	[doodads.burnium]
		#The number of attempts made to suscessfully drop an item
		#positive numbers are exact, negitive are a random chance between 0 and the number
		#Range: -100 ~ 100
		drop_attempts = 1
		#'1 in x' chance the doodad will drop something from the whitelist, excluding items from the blacklist
		#Range: 0 ~ 100
		drop_chance = 1
		#The number of items to drop on a suscessful attempt
		#positive numbers are exact, negitive are a random chance between 0 and the number
		#Range: -100 ~ 100
		drop_amount = -3
		#Items listed here have a chance to drop
		#Formats: ItemTag: 'tag|<tagId>#<count>', Mod Item: '<modId>:<itemId>#<count>'
		whitelist = ["tag|forge:gems/burnium#1-4", "tag|forge:dusts/burnium#1-4"]
		#Items listed here can never drop
		#Formats: ItemTag: 'tag|<tagId>', Mod Item: '<modId>:<itemId>', Entire Mod: 'mod|<modId>'
		blacklist = []

[plants]
	#If enabled Terraqueous flowers require shears to harvest, otherwise nothing will drop
	flowersRequireShears = false

	#Chance the plant will grow on the next block update
	[plants.plant_grow]
		#Range: 0 ~ 100
		flower_normal = 10
		#Range: 0 ~ 100
		flower_rain = 9
		#Range: 0 ~ 100
		grass_normal = 95
		#Range: 0 ~ 100
		grass_rain = 75
		#Range: 0 ~ 100
		pineapple_normal = 8
		#Range: 0 ~ 100
		pineapple_rain = 5
		#Range: 0 ~ 100
		cactus_day = 0
		#Range: 0 ~ 100
		cactus_night = 8

	#Chance the plant will spread on the next block update
	[plants.plant_spread]
		#Range: 0 ~ 100
		flower_normal = 20
		#Range: 0 ~ 100
		flower_rain = 18
		#Range: 0 ~ 100
		grass_normal = 20
		#Range: 0 ~ 100
		grass_rain = 18
		#Range: 0 ~ 100
		grapevine_normal = 15
		#Range: 0 ~ 100
		grapevine_rain = 13
		#Range: 0 ~ 100
		lifevine_normal = 15
		#Range: 0 ~ 100
		lifevine_rain = 13
		#Range: 0 ~ 100
		deathvine_normal = 15
		#Range: 0 ~ 100
		deathvine_rain = 13

	#Chance the plant will grow fruit on the next block update
	[plants.fruit_grow]
		#Range: 0 ~ 100
		pineapple_normal = 40
		#Range: 0 ~ 100
		pineapple_rain = 40
		#Range: 0 ~ 100
		cactus_day = 0
		#Range: 0 ~ 100
		cactus_night = 40
		#Range: 0 ~ 100
		grapevine_normal = 40
		#Range: 0 ~ 100
		grapevine_rain = 40
		#Range: 0 ~ 100
		lifevine_normal = 40
		#Range: 0 ~ 100
		lifevine_rain = 40
		#Range: 0 ~ 100
		deathvine_normal = 40
		#Range: 0 ~ 100
		deathvine_rain = 40

[trees]
	#Controls if the fruit stays on the trees or randomly falls off
	fruitStaysOnTrees = false

	#'1 in x' chance the sapling will grow on the next block update
	[trees.sapling_grow]
		#Range: 0 ~ 100
		apple = 7
		#Range: 0 ~ 100
		cherry = 7
		#Range: 0 ~ 100
		orange = 7
		#Range: 0 ~ 100
		pear = 7
		#Range: 0 ~ 100
		peach = 7
		#Range: 0 ~ 100
		mango = 7
		#Range: 0 ~ 100
		lemon = 7
		#Range: 0 ~ 100
		plum = 7
		#Range: 0 ~ 100
		coconut = 7
		#Range: 0 ~ 100
		banana = 7
		#Range: 0 ~ 100
		mulberry = 7

	#'1 in x' chance the fruit flower will grow on the next block update
	[trees.flower_grow]
		#Range: 0 ~ 100
		apple = 25
		#Range: 0 ~ 100
		cherry = 25
		#Range: 0 ~ 100
		orange = 25
		#Range: 0 ~ 100
		pear = 25
		#Range: 0 ~ 100
		peach = 25
		#Range: 0 ~ 100
		mango = 25
		#Range: 0 ~ 100
		lemon = 25
		#Range: 0 ~ 100
		plum = 25
		#Range: 0 ~ 100
		banana = 15
		#Range: 0 ~ 100
		mulberry = 25

	#'1 in x' chance the fruit will grow on the next block update
	[trees.fruit_grow]
		#Range: 0 ~ 100
		apple = 40
		#Range: 0 ~ 100
		cherry = 40
		#Range: 0 ~ 100
		orange = 40
		#Range: 0 ~ 100
		pear = 50
		#Range: 0 ~ 100
		peach = 40
		#Range: 0 ~ 100
		mango = 50
		#Range: 0 ~ 100
		lemon = 30
		#Range: 0 ~ 100
		plum = 40
		#Range: 0 ~ 100
		coconut = 20
		#Range: 0 ~ 100
		banana = 20
		#Range: 0 ~ 100
		mulberry = 40

	#'1 in x' chance a fruit will fall on the next block update
	#If 'fruitStaysOnTrees' is set true, fruit will never drop
	[trees.fruit_fall]
		#Range: 0 ~ 100
		apple = 50
		#Range: 0 ~ 100
		cherry = 50
		#Range: 0 ~ 100
		orange = 50
		#Range: 0 ~ 100
		pear = 60
		#Range: 0 ~ 100
		peach = 50
		#Range: 0 ~ 100
		mango = 60
		#Range: 0 ~ 100
		lemon = 40
		#Range: 0 ~ 100
		plum = 50
		#Range: 0 ~ 100
		coconut = 70
		#Range: 0 ~ 100
		mulberry = 50

#StormForge Settings
#1EU = 4RF = 10J = 0.4MJ (http://ftbwiki.org/Power_Systems)
[stormforge]
	#Controls who has permission to create a StormForge.
	#0 = No One, 1 = OP's Only, 2 = OP's and Creative Players, 3 = Everyone
	#NOTE: Does not disable/remove existing StormForges
	#NOTE: StormForges require addCraftables
	#Allowed Values: NO_ONE, OPS_ONLY, OPS_CREATIVE, EVERYONE
	permissions = "EVERYONE"
	#A smelting recipe's 'cookingtime' will be multiplied by this value when processed in a StormForge
	#Range: 1.0 ~ 100.0
	smeltingTimeMultiplier = 2.0
	#The number of ticks needed to repair an item by one point
	#Range: 20 ~ 600
	ticksPerRepairPoint = 100
	#The base amount of energy charged per tick
	#This value is multiplied by the PowerMultiplier that matches the items requirements
	#Range: 1 ~ 2048
	powerPerTickBase = 32
	#When charging with Forge Units, powerPerTickBase times this equals the base FU/t
	#Range: 0.001 ~ 1000.0
	powerMultiplierFU = 4.0
	#When charging with Immersive Flux, powerPerTickBase times this equals the base IF/t
	#Range: 0.001 ~ 1000.0
	powerMultiplierIF = 4.0
	#When charging with Joules, powerPerTickBase times this equals the base J/t
	#Range: 0.001 ~ 1000.0
	powerMultiplierJ = 10.0

# 
[water_pearl]
	#Prevent breath loss while held, or in the hotbar, or equipped as a bauble
	give_water_breathing = true
	#Allows the placement water into the world, and filling fluid inventories
	world_interaction = true
	#Adds fluid capabilities enabling machines that support it to pull water from the pearl
	use_in_machines = true

#Make adjustments to how different blocks/items function
[tweaks]
	#Glass Blocks will drop shards when broken, if it would otherwise drop nothing
	glassshards_from_block = true
	#Throwable Potions will drop a shard when broken
	glassshards_from_potion_bottle = true
	#Adds feather moulting
	chickens_moult = true
	#Adds two AITasks
	#Animals the follow for wheat will also follow for hay
	#Animals that eat grass will also eat hay
	add_hay_ai_tasks = true
	#Map of non-colored blocks that have colored variants but do not just add the color name to the star or end (eg. Glass & Stained Glass
	#Format: <modId>:<base_blockId>:<colored_blockId> Note: the colored_blockId must include * in place of the color (eg. 'orange_stained_glass' = '*_stained_glass'
	special_colorizer_class_mappings = ["minecraft:glass:*_stained_glass", "minecraft:glass_pane:*_stained_glass_pane"]

#Controls which loot table injections are applied
[loot_tables]

	# 
	[loot_tables.chests]
		#Spawn Bonus Chests can contain LifeFruit
		spawn_bonus_lifefruit = true
		#Mineshaft Chests can contain DeathFruit
		mineshaft_deathfruit = true
		#Village Toolsmith Chests can contain a Molecular Colorizer
		toolsmith_colorizer = true
		#Dungeon Chests can contain a Molecular Colorizer
		dungeon_colorizer = true
		#Stronghold Library Chests can contain a Strange Scroll
		stronghold_strange_scroll = true
		#Nether Bridge Chests can contain a Strange Scroll
		nether_bridge_strange_scroll = true
		#Dungeon Chests can contain the Toon Trotters
		dungeon_toon_trotters = true

	# 
	[loot_tables.mobs]
		#Must be enabled for any of the mob specific ones to work
		enable_extra_drops = true
		blaze_burnium_dust = true
		blaze_burnium_gem = true
		enderman_ender_dust = true
		enderman_endimium_dust = true
		enderman_endimium_gem = true
		endermite_ender_dust = true
		endermite_endimium_dust = true
		magma_cube_burnium_gem = true
		piglin_gold_dust = true
		wither_skeleton_coal_dust = true
		zombie_leather_scraps = true

#Options used by the world generator
[world_gen]
	#This is a general on/off toggle
	#For more control see the sub menu
	generate_clouds = true
	#This is a general on/off toggle
	#For more control see the sub menu
	generate_doodads = true
	#This is a general on/off toggle
	#For more control see the sub menu
	generate_flowers = true
	#This is a general on/off toggle
	#For more control see the sub menu
	generate_plants = true
	#This is a general on/off toggle
	#For more control see the sub menu
	generate_trees = true

	#Generators will not generate in the dimensions on this list
	#The registered name is expected. [eg: minecraft:overworld, minecraft:the_nether, minecraft:the_end] (regex supported)
	#Finding the registered name:
	#With an open source mod, running a search for RegistryKey<DimensionType> should get you the name.
	#With closed sourced mods, asking the author or using a decompiler like JD-GUI are your options.
	[world_gen.dimension_blacklist]
		#Dimensions here are blacklist from all generators
		global = ["randomthings:spectre", "compactmachines:compactmachines"]
		clouds = []
		doodads = []
		flowers = []
		plants = []
		trees = []

	# 
	[world_gen.clouds]
		#A value greater then zero will be used as the clouds base generation height, otherwise its 75% of the worlds height
		#Range: 0 ~ 2048
		height_override = 0
		#Minimum number of blocks in the cloud
		#Range: 8 ~ 64
		size_light_minimum = 16
		#Maximum number of blocks in the cloud
		#Range: 16 ~ 128
		size_light_maximum = 32
		#Minimum number of blocks in the cloud
		#Range: 8 ~ 64
		size_dense_minimum = 24
		#Maximum number of blocks in the cloud
		#Range: 16 ~ 128
		size_dense_maximum = 40
		#Minimum number of blocks in the cloud
		#Range: 8 ~ 64
		size_storm_minimum = 32
		#Maximum number of blocks in the cloud
		#Range: 16 ~ 128
		size_storm_maximum = 48
		#
		#Range: 0.0 ~ 1.0
		chance_light = 0.03
		#
		#Range: 0.0 ~ 1.0
		chance_dense = 0.02
		#
		#Range: 0.0 ~ 1.0
		chance_storm = 0.01
		generate_light_clouds = true
		generate_dense_clouds = true
		generate_storm_clouds = true

	# 
	[world_gen.doodads]
		#Number of placement positions picked on each generation pass
		#Range: 0 ~ 10
		attempts_stick = 2
		#Number of placement positions picked on each generation pass
		#Range: 0 ~ 10
		attempts_stone = 4
		#Number of placement positions picked on each generation pass
		#Range: 0 ~ 10
		attempts_bone = 1
		#Number of placement positions picked on each generation pass
		#Range: 0 ~ 10
		attempts_endimium = 1
		#Number of placement positions picked on each generation pass
		#Range: 0 ~ 10
		attempts_burnium = 1
		#Chance that each placement position has at being reviewed by the generator
		#Range: 0.0 ~ 1.0
		chance_stick = 0.4
		#Chance that each placement position has at being reviewed by the generator
		#Range: 0.0 ~ 1.0
		chance_stone = 0.1
		#Chance that each placement position has at being reviewed by the generator
		#Range: 0.0 ~ 1.0
		chance_bone = 0.2
		#Chance that each placement position has at being reviewed by the generator
		#Range: 0.0 ~ 1.0
		chance_endimium = 0.3
		#Chance that each placement position has at being reviewed by the generator
		#Range: 0.0 ~ 1.0
		chance_burnium = 0.3
		generate_stick = true
		generate_stone = true
		generate_bone = true
		generate_endimium = true
		generate_burnium = true

	# 
	[world_gen.flowers]
		#Number of placement positions picked on each generation pass
		#Range: 0 ~ 10
		attempts_biometype_forest = 1
		#Number of placement positions picked on each generation pass
		#Range: 0 ~ 10
		attempts_biometype_jungle = 1
		#Number of placement positions picked on each generation pass
		#Range: 0 ~ 10
		attempts_biometype_magical = 1
		#Number of placement positions picked on each generation pass
		#Range: 0 ~ 10
		attempts_biometype_mountain = 1
		#Number of placement positions picked on each generation pass
		#Range: 0 ~ 10
		attempts_biometype_plains = 1
		#Number of placement positions picked on each generation pass
		#Range: 0 ~ 10
		attempts_biometype_water = 1
		#Chance that each placement position has at being reviewed by the generator
		#Range: 0.0 ~ 1.0
		chance_biometype_forest = 0.35
		#Chance that each placement position has at being reviewed by the generator
		#Range: 0.0 ~ 1.0
		chance_biometype_jungle = 0.35
		#Chance that each placement position has at being reviewed by the generator
		#Range: 0.0 ~ 1.0
		chance_biometype_magical = 0.35
		#Chance that each placement position has at being reviewed by the generator
		#Range: 0.0 ~ 1.0
		chance_biometype_mountain = 0.35
		#Chance that each placement position has at being reviewed by the generator
		#Range: 0.0 ~ 1.0
		chance_biometype_plains = 0.35
		#Chance that each placement position has at being reviewed by the generator
		#Range: 0.0 ~ 1.0
		chance_biometype_water = 0.35
		#While true flowers generated will differ by biome type
		per_biome_flowers = true

	# 
	[world_gen.plants]
		#Number of placement positions picked on each generation pass
		#Range: 0 ~ 10
		attempts_pineapple = 1
		#Number of placement positions picked on each generation pass
		#Range: 0 ~ 10
		attempts_cactus = 1
		#Chance that each placement position has at being reviewed by the generator
		#Range: 0.0 ~ 1.0
		chance_pineapple = 0.75
		#Chance that each placement position has at being reviewed by the generator
		#Range: 0.0 ~ 1.0
		chance_cactus = 0.25
		#Can Pineapples Generate
		generate_pineapple = true
		#Can Prickly Pear Cactus Generate
		generate_cactus = true

	# 
	[world_gen.trees]
		#Number of placement positions picked on each generation pass
		#Range: 0 ~ 10
		attempts_biometype_beach = 2
		#Number of placement positions picked on each generation pass
		#Range: 0 ~ 10
		attempts_biometype_forest = 1
		#Number of placement positions picked on each generation pass
		#Range: 0 ~ 10
		attempts_biometype_hills = 1
		#Number of placement positions picked on each generation pass
		#Range: 0 ~ 10
		attempts_biometype_jungle = 2
		#Number of placement positions picked on each generation pass
		#Range: 0 ~ 10
		attempts_biometype_mountain = 1
		#Number of placement positions picked on each generation pass
		#Range: 0 ~ 10
		attempts_biometype_plains = 1
		#Chance that each placement position has at being reviewed by the generator
		#Range: 0.0 ~ 1.0
		chance_biometype_beach = 0.02
		#Chance that each placement position has at being reviewed by the generator
		#Range: 0.0 ~ 1.0
		chance_biometype_forest = 0.02
		#Chance that each placement position has at being reviewed by the generator
		#Range: 0.0 ~ 1.0
		chance_biometype_hills = 0.01
		#Chance that each placement position has at being reviewed by the generator
		#Range: 0.0 ~ 1.0
		chance_biometype_jungle = 0.04
		#Chance that each placement position has at being reviewed by the generator
		#Range: 0.0 ~ 1.0
		chance_biometype_mountain = 0.015
		#Chance that each placement position has at being reviewed by the generator
		#Range: 0.0 ~ 1.0
		chance_biometype_plains = 0.01
		#Found in the following biome types:
		#Forest
		generate_apple = true
		#Found in the following biome types:
		#Hills
		generate_cherry = true
		#Found in the following biome types:
		#Hills
		generate_orange = true
		#Found in the following biome types:
		#Forest
		generate_pear = true
		#Found in the following biome types:
		#Mountain
		generate_peach = true
		#Found in the following biome types:
		#Forest
		generate_mango = true
		#Found in the following biome types:
		#Hills
		generate_lemon = true
		#Found in the following biome types:
		#Hills
		generate_plum = true
		#Found in the following biome types:
		#Beach
		generate_coconut = true
		#Found in the following biome types:
		#Jungle
		generate_banana = true
		#Found in the following biome types:
		#Plains
		generate_mulberry = true

#Mod integration can be disabled to solve compatibility issues, remove unwanted/unneeded features, etc.
[integration]
	#CloudTalisman, BurniumBelt, ToonTrotters, and WaterPearl will function while equipped as a Curio
	enableCurios = true
	#Adds: fruit to the BioReactor, endimium/burnium ore to the LaserDrill, and flowers/cactus pear/pineapple/banana stalk to the Plant Gatherer
	enableIndustrialForegoing = true

